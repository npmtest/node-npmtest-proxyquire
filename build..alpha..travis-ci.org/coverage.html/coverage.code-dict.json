{"/home/travis/build/npmtest/node-npmtest-proxyquire/test.js":"/* istanbul instrument in package npmtest_proxyquire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-proxyquire/lib.npmtest_proxyquire.js":"/* istanbul instrument in package npmtest_proxyquire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_proxyquire = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_proxyquire = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-proxyquire/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-proxyquire && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_proxyquire */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_proxyquire\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_proxyquire.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_proxyquire.rollup.js'] =\n            local.assetsDict['/assets.npmtest_proxyquire.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_proxyquire.__dirname +\n                    '/lib.npmtest_proxyquire.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-proxyquire/proxyquire/index.js":"'use strict';\n\nvar Proxyquire = require('./lib/proxyquire');\n\n// delete this module from the cache to force re-require in order to allow resolving test module via parent.module\ndelete require.cache[require.resolve(__filename)];\n\nmodule.exports = new Proxyquire(module.parent);\nmodule.exports.compat = function() {\n  throw new Error(\"Proxyquire compat mode has been removed. Please update your code to use the new API or pin the version in your package.json file to ~0.6\");\n};\n","/home/travis/build/npmtest/node-npmtest-proxyquire/proxyquire/lib/proxyquire.js":"'use strict';\n/*jshint laxbreak:true, loopfunc:true*/\n\nvar path = require('path')\n  , Module = require('module')\n  , resolve = require('resolve')\n  , dirname = require('path').dirname\n  , ProxyquireError = require('./proxyquire-error')\n  , is = require('./is')\n  , assert = require('assert')\n  , fillMissingKeys = require('fill-keys')\n  , moduleNotFoundError = require('module-not-found-error')\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  ;\n\nfunction validateArguments(request, stubs) {\n  var msg = (function getMessage() {\n    if (!request)\n      return 'Missing argument: \"request\". Need it to resolve desired module.';\n\n    if (!stubs)\n      return 'Missing argument: \"stubs\". If no stubbing is needed, use regular require instead.';\n\n    if (!is.String(request))\n      return 'Invalid argument: \"request\". Needs to be a requirable string that is the module to load.';\n\n    if (!is.Object(stubs))\n      return 'Invalid argument: \"stubs\". Needs to be an object containing overrides e.g., {\"path\": { extname: function () { ... } } }.';\n  })();\n\n  if (msg) throw new ProxyquireError(msg);\n}\n\nfunction Proxyquire(parent) {\n  var self = this\n    , fn = self.load.bind(self)\n    , proto = Proxyquire.prototype\n    ;\n\n  this._parent = parent;\n  this._preserveCache = true;\n\n  Object.keys(proto)\n    .forEach(function (key) {\n      if (is.Function(proto[key])) fn[key] = proto[key].bind(self);\n    });\n\n  self.fn = fn;\n  return fn;\n}\n\n/**\n * Disables call thru, which determines if keys of original modules will be used\n * when they weren't stubbed out.\n * @name noCallThru\n * @function\n * @private\n * @return {object} The proxyquire function to allow chaining\n */\nProxyquire.prototype.noCallThru = function () {\n  this._noCallThru = true;\n  return this.fn;\n};\n\n/**\n * Enables call thru, which determines if keys of original modules will be used\n * when they weren't stubbed out.\n * @name callThru\n * @function\n * @private\n * @return {object} The proxyquire function to allow chaining\n */\nProxyquire.prototype.callThru = function () {\n  this._noCallThru = false;\n  return this.fn;\n};\n\n/**\n * Will make proxyquire remove the requested modules from the `require.cache` in order to force \n * them to be reloaded the next time they are proxyquired.\n * This behavior differs from the way nodejs `require` works, but for some tests this maybe useful.\n *\n * @name noPreserveCache\n * @function\n * @private\n * @return {object} The proxyquire function to allow chaining\n */\nProxyquire.prototype.noPreserveCache = function() {\n  this._preserveCache = false;\n  return this.fn;\n};\n\n/**\n * Restores proxyquire caching behavior to match the one of nodejs `require` \n *\n * @name preserveCache\n * @function\n * @private\n * @return {object} The proxyquire function to allow chaining\n */\nProxyquire.prototype.preserveCache = function() {\n  this._preserveCache = true;\n  return this.fn;\n};\n\n/**\n * Loads a module using the given stubs instead of their normally resolved required modules.\n * @param request The requirable module path to load.\n * @param stubs The stubs to use. e.g., { \"path\": { extname: function () { ... } } }\n * @return {*} A newly resolved module with the given stubs.\n */\nProxyquire.prototype.load = function (request, stubs) {\n  validateArguments(request, stubs);\n\n  // Find out if any of the passed stubs are global overrides\n  for (var key in stubs) {\n    var stub = stubs[key];\n\n    if (stub === null) continue;\n\n    if (typeof stub === 'undefined') {\n      throw new ProxyquireError('Invalid stub: \"' + key + '\" cannot be undefined');\n    }\n\n    if (hasOwnProperty.call(stub, '@global')) {\n      this._containsGlobal = true;\n    }\n\n    if (hasOwnProperty.call(stub, '@runtimeGlobal')) {\n      this._containsGlobal = true;\n      this._containsRuntimeGlobal = true;\n    }\n  }\n\n  // Ignore the module cache when return the requested module\n  return this._withoutCache(this._parent, stubs, request, this._parent.require.bind(this._parent, request));\n};\n\n// This replaces a module's require function\nProxyquire.prototype._require = function(module, stubs, path) {\n  assert(typeof path === 'string', 'path must be a string');\n  assert(path, 'missing path');\n\n  if (hasOwnProperty.call(stubs, path)) {\n    var stub = stubs[path];\n\n    if (stub === null) {\n      // Mimic the module-not-found exception thrown by node.js.\n      throw moduleNotFoundError(path);\n    }\n\n    if (hasOwnProperty.call(stub, '@noCallThru') ? !stub['@noCallThru'] : !this._noCallThru) {\n      fillMissingKeys(stub, Module._load(path, module));\n    }\n\n    // We are top level or this stub is marked as global\n    if (module.parent == this._parent || hasOwnProperty.call(stub, '@global') || hasOwnProperty.call(stub, '@runtimeGlobal')) {\n      return stub;\n    }\n  }\n\n  // Only ignore the cache if we have global stubs\n  if (this._containsRuntimeGlobal) {\n    return this._withoutCache(module, stubs, path, Module._load.bind(Module, path, module));\n  } else {\n    return Module._load(path, module);\n  }\n};\n\nProxyquire.prototype._withoutCache = function(module, stubs, path, func) {\n  // Temporarily disable the cache - either per-module or globally if we have global stubs\n  var restoreCache = this._disableCache(module, path);\n\n  // Override all require extension handlers\n  var restoreExtensionHandlers = this._overrideExtensionHandlers(module, stubs);\n\n  try {\n    // Execute the function that needs the module cache disabled\n    return func();\n  } finally {\n    // Restore the cache if we are preserving it\n    if (this._preserveCache) {\n      restoreCache();\n    } else {\n      var id = Module._resolveFilename(path, module);\n      var stubIds = Object.keys(stubs).map(function (stubPath) {\n        try {\n          return resolve.sync(stubPath, {\n            basedir: dirname(id),\n            extensions: Object.keys(require.extensions),\n            paths: Module.globalPaths\n          })\n        } catch (_) {}\n      });\n      var ids = [id].concat(stubIds.filter(Boolean));\n\n      ids.forEach(function (id) {\n        delete require.cache[id];        \n      });\n    }\n\n    // Finally restore the original extension handlers\n    restoreExtensionHandlers();\n  }\n};\n\nProxyquire.prototype._disableCache = function(module, path) {\n  if (this._containsGlobal) {\n    // empty the require cache because if we are stubbing C but requiring A,\n    // and if A requires B and B requires C, then B and C might be cached already\n    // and we'll never get the chance to return our stub\n    return this._disableGlobalCache();\n  }\n\n  // Temporarily delete the SUT from the require cache\n  return this._disableModuleCache(path, module);\n};\n\nProxyquire.prototype._disableGlobalCache = function() {\n  var cache = require.cache;\n  require.cache = Module._cache = {};\n\n  for (var id in cache) {\n    // Keep native modules (i.e. `.node` files).\n    // Otherwise, Node.js would throw a “Module did not self-register”\n    // error upon requiring it a second time.\n    // See https://github.com/nodejs/node/issues/5016.\n    if (/\\.node$/.test(id)) {\n      require.cache[id] = cache[id];\n    }\n  }\n\n  // Return a function that will undo what we just did\n  return function() {\n    // Keep native modules which were added to the cache in the meantime.\n    for (var id in require.cache) {\n      if (/\\.node$/.test(id)) {\n        cache[id] = require.cache[id]\n      }\n    }\n\n    require.cache = Module._cache = cache;\n  };\n};\n\nProxyquire.prototype._disableModuleCache = function(path, module) {\n  // Find the ID (location) of the SUT, relative to the parent\n  var id = Module._resolveFilename(path, module);\n\n  var cached = Module._cache[id];\n  delete Module._cache[id];\n\n  // Return a function that will undo what we just did\n  return function() {\n    if (cached) {\n      Module._cache[id] = cached;\n    }\n  };\n};\n\nProxyquire.prototype._overrideExtensionHandlers = function(module, stubs) {\n  var originalExtensions = {};\n  var self = this;\n\n  Object.keys(require.extensions).forEach(function(extension) {\n    // Store the original so we can restore it later\n    if (!originalExtensions[extension]) {\n      originalExtensions[extension] = require.extensions[extension];\n    }\n\n    // Override the default handler for the requested file extension\n    require.extensions[extension] = function(module, filename) {\n      // Override the require method for this module\n      module.require = self._require.bind(self, module, stubs);\n\n      return originalExtensions[extension](module, filename);\n    };\n  });\n\n  // Return a function that will undo what we just did\n  return function() {\n    Object.keys(originalExtensions).forEach(function(extension) {\n      require.extensions[extension] = originalExtensions[extension];\n    });\n  };\n};\n\nmodule.exports = Proxyquire;\n","/home/travis/build/npmtest/node-npmtest-proxyquire/proxyquire/lib/proxyquire-error.js":"'use strict';\n\nvar util = require('util');\n\nfunction ProxyquireError(msg) {\n  this.name = 'ProxyquireError';\n  Error.captureStackTrace(this, ProxyquireError);\n  this.message = msg || 'An error occurred inside proxyquire.';\n}\n\nutil.inherits(ProxyquireError, Error);\n\nmodule.exports = ProxyquireError;\n","/home/travis/build/npmtest/node-npmtest-proxyquire/proxyquire/lib/is.js":"var is = {};\n\n['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'].forEach(function (name) {\n  is[name] = function (obj) {\n    return Object.prototype.toString.call(obj) == '[object ' + name + ']';\n  };\n});\n\nis.Object = function (obj) {\n  return obj === new Object(obj);\n};\n\nmodule.exports = is;\n"}